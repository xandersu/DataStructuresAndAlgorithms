package com.xandersu.datastructuresandalgorithms.rbtree;

/**
 * @Author: suxun
 * @Date: 2018/11/12 21:15
 * @Description:红黑树 也是二分搜索树
 * 算法导论中红黑素5个定义
 * 1、每个节点要么是红要么是黑
 * 2、根结点是黑色
 * 3、每一个叶子节点（最后的空节点）是黑色的
 * 4、每一个节点是红色的，那么他的孩子的节点是黑色的
 * 5、从任意一个节点到叶子节点，经过的黑的节点是一样的
 * ·
 * 红黑树与2-3树等价性,2-3树是绝对平衡
 * ·                                                                       42
 * 2-3树                                    a      b-c               /           \
 * 1、满足二分搜索树的基本性质                 / \     / \            17-33          50
 * 2、节点可以存放一个元素或者两个元素          2节点    3节点          /  |  \       /  \
 * ·                                                          6-12  18  37   48  66-88
 * 如果插入2节点融合成3节点
 * 如果插入3节点，临时形成4节点，变形成二分搜索树
 * 如果插入3节点，父亲节点是2节点，临时4节点，拆分成临时3个二节点，向上融合，如果父节点是2节点，
 * 如果父节点是3节点，父亲成为临时4节点，4节点拆成3个2节点的子树
 * ·用小一点的数据集模拟自己的代码逻辑运转过程
 * ·
 * 红黑树和2-3树
 * 红色节点都是左倾斜的（定义）
 * 黑色节点的右孩子一定是黑的
 * 红黑树是保持黑平衡的二叉树，严格意义上不是平衡二叉树
 * 最大高度2logn 时间复杂度O(logn)
 * 添加删除红黑树比AVL快一些，只查询AVL快一点
 * ·
 * 永远添加红色节点,每次new节点，都是红色节点
 * 颜色翻转和右旋转
 * 红黑树添加新元素：
 * 红节点右孩子还是红节点-》左旋转-右旋转-颜色翻转
 *      b       b              b         b          r
 *   /    -> r      ->     r     ->    /  \   ->  /  \
 * r            r       r            r     r     b    b
 *                 左旋转        右旋转         颜色翻转
 * · 时机：添加节点后回溯向上维护
 *
 */
public interface MyRBTree {
}
